// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "cockroachdb"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String         @id @default(cuid())
  name          String?
  description   String?
  email         String?        @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  collections   Collection[]
  items         Item[]
  favoriteItems FavoriteItem[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Collection {
  id        String   @id @default(cuid())
  title     String
  createdAt DateTime @default(now())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  items     Item[]
}

model Item {
  id           String         @id @default(cuid())
  thumbnail    String
  title        String
  description  String?
  note         String?
  collectionId String
  collection   Collection     @relation(fields: [collectionId], references: [id])
  url          String?
  createdAt    DateTime       @default(now())
  userId       String
  user         User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  FavoriteItem FavoriteItem[]
}

model FavoriteItem {
  id     String @id @default(cuid())
  userId String
  itemId String
  user   User   @relation(fields: [userId], references: [id])
  item   Item   @relation(fields: [itemId], references: [id])

  @@unique([userId, itemId])
}
